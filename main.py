import os
import json
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InputMediaVideo
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

load_dotenv()

# ========================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ========================================================================
bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [int(id_str.strip()) for id_str in os.getenv("ADMIN_IDS", "").split(",") if id_str.strip()]

CONFIG_FILE = "config.json"
POSTS_FILE = "posts.json"

# ========================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================================================
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def load_config():
    if not os.path.exists(CONFIG_FILE):
        default = {
            "channel_id": os.getenv("CHANNEL_ID") or "",
            "publish_times": ["09:00", "13:00", "17:00", "21:00"],
            "standard_text": "<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b> —Ç–µ–∫—Å—Ç"
        }
        save_config(default)
        return default
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_config(data):
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_posts():
    if not os.path.exists(POSTS_FILE):
        return []
    try:
        with open(POSTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_posts(posts):
    with open(POSTS_FILE, "w", encoding="utf-8") as f:
        json.dump(posts, f, ensure_ascii=False, indent=2)

def get_next_publish_time(times, existing_posts):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    now = datetime.now()
    times = sorted([datetime.strptime(t, "%H:%M").time() for t in times])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ –≤—Ä–µ–º–µ–Ω–∞
    busy_times = set()
    for post in existing_posts:
        try:
            post_time = datetime.strptime(post["time"], "%H:%M %d.%m.%Y")
            busy_times.add(post_time.strftime("%H:%M %d.%m.%Y"))
        except:
            continue
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
    for day in range(8):
        current_date = now.date() + timedelta(days=day)
        
        for time in times:
            publish_time = datetime.combine(current_date, time)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è
            if day == 0 and publish_time < now:
                continue
                
            time_str = publish_time.strftime("%H:%M %d.%m.%Y")
            if time_str not in busy_times:
                return time_str
    
    # –ï—Å–ª–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –∑–∞–Ω—è—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    next_week = now.date() + timedelta(days=7)
    return datetime.combine(next_week, times[0]).strftime("%H:%M %d.%m.%Y")

# ========================================================================
# –°–û–°–¢–û–Ø–ù–ò–Ø
# ========================================================================
class PostState(StatesGroup):
    waiting_media = State()

class ConfigState(StatesGroup):
    waiting_channel = State()
    waiting_times = State()
    waiting_text = State()

class ViewPostsState(StatesGroup):
    viewing = State()

# ========================================================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ========================================================================
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª ‚åõ")],
        [KeyboardButton(text="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üìù")],
        [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ‚öôÔ∏è")]
    ],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å ‚úÖ")]],
    resize_keyboard=True
)

config_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

view_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"), KeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå"), KeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ")]
    ],
    resize_keyboard=True
)

# ========================================================================
# –•–ï–ù–î–õ–ï–†–´
# ========================================================================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await message.answer("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å :)", reply_markup=main_kb)

@dp.message(F.text == "–û—Ç–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª ‚åõ")
async def schedule_mode(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    config = load_config()
    if not config.get("channel_id"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return
    
    posts = load_posts()
    next_time = get_next_publish_time(config["publish_times"], posts)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    next_time_obj = datetime.strptime(next_time, "%H:%M %d.%m.%Y")
    time_str = next_time_obj.strftime("%H:%M")
    day_str = next_time_obj.strftime("%d.%m.%Y")
    
    await state.set_state(PostState.waiting_media)
    await message.answer(
        f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É—é –ø–æ—Å—Ç –Ω–∞ {time_str} {day_str}.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∞–ª—å–±–æ–º (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–ª–µ –∞–ª—å–±–æ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).",
        reply_markup=cancel_kb
    )

@dp.message(PostState.waiting_media, F.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å ‚úÖ")
async def finish_schedule(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await state.clear()
    await message.answer("–†–µ–∂–∏–º –æ—Ç–ª–æ–∂–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ", reply_markup=main_kb)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–ª—å–±–æ–º–∞—Ö
albums_data = {}

@dp.message(PostState.waiting_media, F.media_group_id)
async def handle_album_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞"""
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    media_group_id = message.media_group_id
    
    if media_group_id not in albums_data:
        albums_data[media_group_id] = {
            "media": [],
            "caption": message.caption or "",
            "created_at": datetime.now(),
            "user_id": message.from_user.id
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –∞–ª—å–±–æ–º
    if message.photo:
        albums_data[media_group_id]["media"].append({
            "kind": "photo",
            "file_id": message.photo[-1].file_id
        })
    elif message.video:
        albums_data[media_group_id]["media"].append({
            "kind": "video", 
            "file_id": message.video.file_id
        })
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –∞–ª—å–±–æ–º–∞
    await asyncio.sleep(1)

@dp.message(PostState.waiting_media, F.content_type.in_({"photo", "video"}))
async def handle_single_media(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–µ–¥–∏–∞"""
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞
    if message.media_group_id:
        return
    
    config = load_config()
    posts = load_posts()
    
    publish_time = get_next_publish_time(config["publish_times"], posts)
    
    post = {
        "time": publish_time,
        "type": "single",
        "media": [{
            "kind": "photo" if message.content_type == "photo" else "video",
            "file_id": message.photo[-1].file_id if message.content_type == "photo" else message.video.file_id
        }],
        "caption": (message.caption or "") + "\n\n" + config["standard_text"]
    }
    
    posts.append(post)
    save_posts(posts)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    publish_time_obj = datetime.strptime(publish_time, "%H:%M %d.%m.%Y")
    time_str = publish_time_obj.strftime("%H:%M")
    day_str = publish_time_obj.strftime("%d.%m.%Y")
    
    next_time = get_next_publish_time(config["publish_times"], posts)
    next_time_obj = datetime.strptime(next_time, "%H:%M %d.%m.%Y")
    next_time_str = next_time_obj.strftime("%H:%M %d.%m.%Y")
    
    await message.answer(
        f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {time_str} {day_str}\n"
        f"‚è∞ –û–∂–∏–¥–∞—é –ø–æ—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {next_time_str}",
        reply_markup=cancel_kb
    )

@dp.message(PostState.waiting_media)
async def handle_text_or_album_completion(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤"""
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_time = datetime.now()
    user_albums = {k: v for k, v in albums_data.items() if v["user_id"] == message.from_user.id}
    
    for media_group_id, album_data in list(user_albums.items()):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞
        if (current_time - album_data["created_at"]).total_seconds() > 2 and album_data["media"]:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º
            config = load_config()
            posts = load_posts()
            
            publish_time = get_next_publish_time(config["publish_times"], posts)
            
            post = {
                "time": publish_time,
                "type": "album",
                "media": album_data["media"],
                "caption": (album_data["caption"] or "") + "\n\n" + config["standard_text"]
            }
            
            posts.append(post)
            save_posts(posts)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            publish_time_obj = datetime.strptime(publish_time, "%H:%M %d.%m.%Y")
            time_str = publish_time_obj.strftime("%H:%M")
            day_str = publish_time_obj.strftime("%d.%m.%Y")
            
            next_time = get_next_publish_time(config["publish_times"], posts)
            next_time_obj = datetime.strptime(next_time, "%H:%M %d.%m.%Y")
            next_time_str = next_time_obj.strftime("%H:%M %d.%m.%Y")
            
            await message.answer(
                f"‚úÖ –ê–ª—å–±–æ–º ({len(album_data['media'])} –º–µ–¥–∏–∞) –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {time_str} {day_str}\n"
                f"‚è∞ –û–∂–∏–¥–∞—é –ø–æ—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {next_time_str}",
                reply_markup=cancel_kb
            )
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞–ª—å–±–æ–º
            del albums_data[media_group_id]
            return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.text and not message.media_group_id:
        config = load_config()
        posts = load_posts()
        
        publish_time = get_next_publish_time(config["publish_times"], posts)
        
        post = {
            "time": publish_time,
            "type": "text",
            "text": message.text + "\n\n" + config["standard_text"]
        }
        
        posts.append(post)
        save_posts(posts)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        publish_time_obj = datetime.strptime(publish_time, "%H:%M %d.%m.%Y")
        time_str = publish_time_obj.strftime("%H:%M")
        day_str = publish_time_obj.strftime("%d.%m.%Y")
        
        next_time = get_next_publish_time(config["publish_times"], posts)
        next_time_obj = datetime.strptime(next_time, "%H:%M %d.%m.%Y")
        next_time_str = next_time_obj.strftime("%H:%M %d.%m.%Y")
        
        await message.answer(
            f"‚úÖ –¢–µ–∫—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {time_str} {day_str}\n"
            f"‚è∞ –û–∂–∏–¥–∞—é –ø–æ—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {next_time_str}",
            reply_markup=cancel_kb
        )

@dp.message(F.text == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üìù")
async def list_posts(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    posts = load_posts()
    if not posts:
        return await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
    
    await state.set_state(ViewPostsState.viewing)
    await state.update_data(index=0)
    await show_post(message.chat.id, 0)

@dp.message(ViewPostsState.viewing, F.text == "–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è")
async def next_post(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    data = await state.get_data()
    idx = min(len(load_posts()) - 1, data.get("index", 0) + 1)
    await state.update_data(index=idx)
    await show_post(message.chat.id, idx)

@dp.message(ViewPostsState.viewing, F.text == "‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è")
async def prev_post(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    data = await state.get_data()
    idx = max(0, data.get("index", 0) - 1)
    await state.update_data(index=idx)
    await show_post(message.chat.id, idx)

@dp.message(ViewPostsState.viewing, F.text == "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå")
async def delete_post(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    data = await state.get_data()
    idx = data.get("index", 0)
    posts = load_posts()
    
    if 0 <= idx < len(posts):
        posts.pop(idx)
        save_posts(posts)
        
        if not posts:
            await state.clear()
            return await message.answer("–í—Å–µ –ø–æ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main_kb)
        
        idx = max(0, idx - 1)
        await state.update_data(index=idx)
        await show_post(message.chat.id, idx)

@dp.message(ViewPostsState.viewing, F.text == "–ì–æ—Ç–æ–≤–æ ‚úÖ")
async def finish_view(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é ‚úÖ", reply_markup=main_kb)

async def show_post(chat_id: int, idx: int):
    posts = load_posts()
    if idx >= len(posts):
        return
    
    post = posts[idx]
    await bot.send_message(chat_id, f"–ü–æ—Å—Ç –Ω–∞ {post['time']}:")
    
    if post["type"] == "single":
        media = post["media"][0]
        if media["kind"] == "photo":
            await bot.send_photo(chat_id, media["file_id"], caption=post["caption"], parse_mode=ParseMode.HTML)
        else:
            await bot.send_video(chat_id, media["file_id"], caption=post["caption"], parse_mode=ParseMode.HTML)
    elif post["type"] == "album":
        media_group = []
        for i, m in enumerate(post["media"]):
            if m["kind"] == "photo":
                media_group.append(InputMediaPhoto(
                    media=m["file_id"], 
                    caption=post["caption"] if i == 0 else None,
                    parse_mode=ParseMode.HTML
                ))
            else:
                media_group.append(InputMediaVideo(
                    media=m["file_id"], 
                    caption=post["caption"] if i == 0 else None,
                    parse_mode=ParseMode.HTML
                ))
        await bot.send_media_group(chat_id, media_group)
    elif post["type"] == "text":
        await bot.send_message(chat_id, post["text"], parse_mode=ParseMode.HTML)
    
    await bot.send_message(chat_id, f"–ü—Ä–æ—Å–º–æ—Ç—Ä {idx+1}/{len(posts)}", reply_markup=view_kb)

@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ‚öôÔ∏è")
async def settings_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    config = load_config()
    await message.answer(
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"<b>–ö–∞–Ω–∞–ª:</b> {config['channel_id']}\n"
        f"<b>–í—Ä–µ–º—è:</b> {', '.join(config['publish_times'])}\n"
        f"<b>–¢–µ–∫—Å—Ç:</b> {config['standard_text']}",
        reply_markup=config_kb
    )

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª")
async def change_channel(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await state.set_state(ConfigState.waiting_channel)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π ID –∫–∞–Ω–∞–ª–∞:")

@dp.message(ConfigState.waiting_channel)
async def set_channel(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    config = load_config()
    config["channel_id"] = message.text.strip()
    save_config(config)
    await state.clear()
    await message.answer("‚úÖ –ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω—ë–Ω!", reply_markup=config_kb)

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
async def change_times(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await state.set_state(ConfigState.waiting_times)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>09:00, 13:00, 17:00</code>)")

@dp.message(ConfigState.waiting_times)
async def set_times(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    try:
        times = [t.strip() for t in message.text.split(",")]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        for time in times:
            datetime.strptime(time, "%H:%M")
        
        config = load_config()
        config["publish_times"] = times
        save_config(config)
        await state.clear()
        await message.answer("‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=config_kb)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
async def change_text(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await state.set_state(ConfigState.waiting_text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML —Ç–µ–≥–∏):")

@dp.message(ConfigState.waiting_text)
async def set_text(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    config = load_config()
    config["standard_text"] = message.text
    save_config(config)
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω—ë–Ω!", reply_markup=config_kb)

@dp.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚úÖ", reply_markup=main_kb)

# ========================================================================
# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö
# ========================================================================
async def scheduler_task():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    while True:
        try:
            now = datetime.now()
            posts = load_posts()
            config = load_config()
            
            if not config.get("channel_id"):
                await asyncio.sleep(60)
                continue
                
            for post in posts[:]:
                try:
                    post_time = datetime.strptime(post["time"], "%H:%M %d.%m.%Y")
                    
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                    if now >= post_time and (now - post_time).total_seconds() < 60:
                        try:
                            if post["type"] == "single":
                                media = post["media"][0]
                                if media["kind"] == "photo":
                                    await bot.send_photo(
                                        config["channel_id"], 
                                        media["file_id"], 
                                        caption=post["caption"],
                                        parse_mode=ParseMode.HTML
                                    )
                                else:
                                    await bot.send_video(
                                        config["channel_id"], 
                                        media["file_id"], 
                                        caption=post["caption"],
                                        parse_mode=ParseMode.HTML
                                    )
                            elif post["type"] == "album":
                                media_group = []
                                for i, m in enumerate(post["media"]):
                                    if m["kind"] == "photo":
                                        media_group.append(InputMediaPhoto(
                                            media=m["file_id"], 
                                            caption=post["caption"] if i == 0 else None,
                                            parse_mode=ParseMode.HTML
                                        ))
                                    else:
                                        media_group.append(InputMediaVideo(
                                            media=m["file_id"], 
                                            caption=post["caption"] if i == 0 else None,
                                            parse_mode=ParseMode.HTML
                                        ))
                                await bot.send_media_group(config["channel_id"], media_group)
                            elif post["type"] == "text":
                                await bot.send_message(
                                    config["channel_id"],
                                    post["text"],
                                    parse_mode=ParseMode.HTML
                                )
                            
                            # –£–¥–∞–ª—è–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
                            posts.remove(post)
                            save_posts(posts)
                            
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                            
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {e}")
                    
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            await asyncio.sleep(60)

# ========================================================================
# –ó–ê–ü–£–°–ö
# ========================================================================
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    asyncio.create_task(scheduler_task())
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(name)s %(levelname)s %(message)s"
    )
    asyncio.run(main())